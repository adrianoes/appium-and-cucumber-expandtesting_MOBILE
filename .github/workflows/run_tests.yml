name: Continuous Integration

on:
  push:
  workflow_dispatch:

jobs:
  execute_test:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Fazer checkout do código
      - name: Checkout Code
        uses: actions/checkout@v4

      # Passo 2: Configurar o Java 17 para SDK Manager
      - name: Set up Java 17 for SDK Manager
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Passo 3: Baixar e Instalar Ferramentas de Linha de Comando do Android
      - name: Download and Install Android Command-line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          cd $ANDROID_HOME/cmdline-tools
          curl -O https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          unzip commandlinetools-linux-10406996_latest.zip
          mv cmdline-tools latest
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
        env:
          ANDROID_HOME: ${{ runner.tool_cache }}/android-sdk

      # Passo 4: Aceitar Licenças do SDK
      - name: Accept SDK Licenses
        run: yes | sdkmanager --licenses || true

      # Passo 5: Instalar Ferramentas do SDK
      - name: Install Android SDK Tools
        run: |
          sdkmanager --install "platform-tools"
          sdkmanager --install "system-images;android-29;google_apis;x86_64"

      # Passo 6: Criar o Emulador (Pixel 4 API 29)
      - name: Create Emulator (Pixel 4 API 29)
        run: echo no | avdmanager create avd -n "Pixel_4_API_29" -k "system-images;android-29;google_apis;x86_64" -d pixel_4

      # Passo 7: Rodar o Emulador Android
      - name: Run Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: pixel_4
          script: |
            adb devices
            timeout --preserve-status 600s adb wait-for-device  # Espera até 600 segundos (10 minutos)

      # Passo 8: Configurar o Java 17 novamente para o Appium
      - name: Set up Java 17 for Appium
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Passo 9: Instalar o Appium
      - name: Install Appium
        run: npm install -g appium

      # Passo 10: Instalar o Driver UiAutomator2
      - name: Install UiAutomator2 Driver
        run: npx appium driver install uiautomator2

      # Passo 11: Habilitar permissões KVM
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Passo 12: Iniciar o servidor Appium
      - name: Start Appium Server
        run: |
          nohup appium -p 4723 -pa /wd/hub &  # Iniciar o servidor Appium em segundo plano
          sleep 120  # Adicionar um pequeno delay para garantir que o servidor Appium esteja totalmente inicializado

      # Passo 13: Construir e rodar os testes com Maven
      - name: Build and Run Tests with Maven
        run: mvn clean install

      # Passo 14: Subir os resultados dos testes
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            target/surefire-reports/
            target/cucumber-reports/
